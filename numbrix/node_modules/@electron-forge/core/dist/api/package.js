"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

require("source-map-support/register");

require("colors");

var _asyncOra = require("@electron-forge/async-ora");

var _debug = _interopRequireDefault(require("debug"));

var _fsExtra = _interopRequireDefault(require("fs-extra"));

var _get = require("@electron/get");

var _fastGlob = _interopRequireDefault(require("fast-glob"));

var _electronPackager = _interopRequireDefault(require("electron-packager"));

var _path = _interopRequireDefault(require("path"));

var _util = require("util");

var _forgeConfig = _interopRequireDefault(require("../util/forge-config"));

var _hook = require("../util/hook");

var _messages = require("../util/messages");

var _readPackageJson = require("../util/read-package-json");

var _rebuild = _interopRequireDefault(require("../util/rebuild"));

var _requireSearch = _interopRequireDefault(require("../util/require-search"));

var _resolveDir = _interopRequireDefault(require("../util/resolve-dir"));

var _outDir = _interopRequireDefault(require("../util/out-dir"));

var _electronVersion = require("../util/electron-version");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const d = (0, _debug.default)('electron-forge:packager');

/**
 * Resolves hooks if they are a path to a file (instead of a `Function`).
 */
function resolveHooks(hooks, dir) {
  if (hooks) {
    return hooks.map(hook => typeof hook === 'string' ? (0, _requireSearch.default)(dir, [hook]) : hook);
  }

  return [];
}
/**
 * Runs given hooks sequentially by mapping them to promises and iterating
 * through while awaiting
 */


function sequentialHooks(hooks) {
  return [async (...args) => {
    const done = args[args.length - 1];
    const passedArgs = args.splice(0, args.length - 1);

    for (const hook of hooks) {
      await (0, _util.promisify)(hook)(...passedArgs);
    }

    done();
  }];
}

var _default = async ({
  dir = process.cwd(),
  interactive = false,
  arch = (0, _get.getHostArch)(),
  platform = process.platform,
  outDir
}) => {
  const ora = interactive ? _asyncOra.ora : _asyncOra.fakeOra;
  let prepareSpinner = ora(`Preparing to Package Application for arch: ${(arch === 'all' ? 'ia32' : arch).cyan}`).start();
  let prepareCounter = 0;
  const resolvedDir = await (0, _resolveDir.default)(dir);

  if (!resolvedDir) {
    throw new Error('Failed to locate compilable Electron application');
  }

  dir = resolvedDir;
  const forgeConfig = await (0, _forgeConfig.default)(dir);
  const packageJSON = await (0, _readPackageJson.readMutatedPackageJson)(dir, forgeConfig);

  if (!packageJSON.main) {
    throw new Error('packageJSON.main must be set to a valid entry point for your Electron app');
  }

  const calculatedOutDir = outDir || (0, _outDir.default)(dir, forgeConfig);
  let packagerSpinner = null;
  const pruneEnabled = !('prune' in forgeConfig.packagerConfig) || forgeConfig.packagerConfig.prune;
  const afterCopyHooks = [async (buildPath, electronVersion, pPlatform, pArch, done) => {
    if (packagerSpinner) {
      packagerSpinner.succeed();
      prepareCounter += 1;
      prepareSpinner = ora(`Preparing to Package Application for arch: ${(prepareCounter === 2 ? 'armv7l' : 'x64').cyan}`).start();
    }

    const bins = await (0, _fastGlob.default)(_path.default.join(buildPath, '**/.bin/**/*'));

    for (const bin of bins) {
      await _fsExtra.default.remove(bin);
    }

    done();
  }, async (buildPath, electronVersion, pPlatform, pArch, done) => {
    prepareSpinner.succeed();
    await (0, _hook.runHook)(forgeConfig, 'packageAfterCopy', buildPath, electronVersion, pPlatform, pArch);
    done();
  }, async (buildPath, electronVersion, pPlatform, pArch, done) => {
    await (0, _rebuild.default)(buildPath, electronVersion, pPlatform, pArch, forgeConfig.electronRebuildConfig);
    packagerSpinner = ora('Packaging Application').start();
    done();
  }];
  afterCopyHooks.push(async (buildPath, electronVersion, pPlatform, pArch, done) => {
    const copiedPackageJSON = await (0, _readPackageJson.readMutatedPackageJson)(buildPath, forgeConfig);

    if (copiedPackageJSON.config && copiedPackageJSON.config.forge) {
      delete copiedPackageJSON.config.forge;
    }

    await _fsExtra.default.writeJson(_path.default.resolve(buildPath, 'package.json'), copiedPackageJSON, {
      spaces: 2
    });
    done();
  });
  afterCopyHooks.push(...resolveHooks(forgeConfig.packagerConfig.afterCopy, dir));
  const afterPruneHooks = [];

  if (pruneEnabled) {
    afterPruneHooks.push(...resolveHooks(forgeConfig.packagerConfig.afterPrune, dir));
  }

  afterPruneHooks.push(async (buildPath, electronVersion, pPlatform, pArch, done) => {
    await (0, _hook.runHook)(forgeConfig, 'packageAfterPrune', buildPath, electronVersion, pPlatform, pArch);
    done();
  });
  const afterExtractHooks = [async (buildPath, electronVersion, pPlatform, pArch, done) => {
    await (0, _hook.runHook)(forgeConfig, 'packageAfterExtract', buildPath, electronVersion, pPlatform, pArch);
    done();
  }];
  afterExtractHooks.push(...resolveHooks(forgeConfig.packagerConfig.afterExtract, dir));
  const packageOpts = {
    asar: false,
    overwrite: true,
    ...forgeConfig.packagerConfig,
    dir,
    arch: arch,
    platform,
    afterCopy: sequentialHooks(afterCopyHooks),
    afterExtract: sequentialHooks(afterExtractHooks),
    afterPrune: sequentialHooks(afterPruneHooks),
    out: calculatedOutDir,
    electronVersion: await (0, _electronVersion.getElectronVersion)(dir, packageJSON)
  };
  packageOpts.quiet = true;

  if (packageOpts.all) {
    throw new Error('config.forge.packagerConfig.all is not supported by Electron Forge');
  }

  if (!packageJSON.version && !packageOpts.appVersion) {
    // eslint-disable-next-line max-len
    (0, _messages.warn)(interactive, 'Please set "version" or "config.forge.packagerConfig.appVersion" in your application\'s package.json so auto-updates work properly'.yellow);
  }

  if (packageOpts.prebuiltAsar) {
    throw new Error('config.forge.packagerConfig.prebuiltAsar is not supported by Electron Forge');
  }

  await (0, _hook.runHook)(forgeConfig, 'generateAssets', platform, arch);
  await (0, _hook.runHook)(forgeConfig, 'prePackage');
  d('packaging with options', packageOpts);
  const outputPaths = await (0, _electronPackager.default)(packageOpts);
  await (0, _hook.runHook)(forgeConfig, 'postPackage', {
    arch,
    outputPaths,
    platform,
    spinner: packagerSpinner
  });
  if (packagerSpinner) packagerSpinner.succeed();
};

exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9hcGkvcGFja2FnZS50cyJdLCJuYW1lcyI6WyJkIiwicmVzb2x2ZUhvb2tzIiwiaG9va3MiLCJkaXIiLCJtYXAiLCJob29rIiwic2VxdWVudGlhbEhvb2tzIiwiYXJncyIsImRvbmUiLCJsZW5ndGgiLCJwYXNzZWRBcmdzIiwic3BsaWNlIiwicHJvY2VzcyIsImN3ZCIsImludGVyYWN0aXZlIiwiYXJjaCIsInBsYXRmb3JtIiwib3V0RGlyIiwib3JhIiwicmVhbE9yYSIsImZha2VPcmEiLCJwcmVwYXJlU3Bpbm5lciIsImN5YW4iLCJzdGFydCIsInByZXBhcmVDb3VudGVyIiwicmVzb2x2ZWREaXIiLCJFcnJvciIsImZvcmdlQ29uZmlnIiwicGFja2FnZUpTT04iLCJtYWluIiwiY2FsY3VsYXRlZE91dERpciIsInBhY2thZ2VyU3Bpbm5lciIsInBydW5lRW5hYmxlZCIsInBhY2thZ2VyQ29uZmlnIiwicHJ1bmUiLCJhZnRlckNvcHlIb29rcyIsImJ1aWxkUGF0aCIsImVsZWN0cm9uVmVyc2lvbiIsInBQbGF0Zm9ybSIsInBBcmNoIiwic3VjY2VlZCIsImJpbnMiLCJwYXRoIiwiam9pbiIsImJpbiIsImZzIiwicmVtb3ZlIiwiZWxlY3Ryb25SZWJ1aWxkQ29uZmlnIiwicHVzaCIsImNvcGllZFBhY2thZ2VKU09OIiwiY29uZmlnIiwiZm9yZ2UiLCJ3cml0ZUpzb24iLCJyZXNvbHZlIiwic3BhY2VzIiwiYWZ0ZXJDb3B5IiwiYWZ0ZXJQcnVuZUhvb2tzIiwiYWZ0ZXJQcnVuZSIsImFmdGVyRXh0cmFjdEhvb2tzIiwiYWZ0ZXJFeHRyYWN0IiwicGFja2FnZU9wdHMiLCJhc2FyIiwib3ZlcndyaXRlIiwib3V0IiwicXVpZXQiLCJhbGwiLCJ2ZXJzaW9uIiwiYXBwVmVyc2lvbiIsInllbGxvdyIsInByZWJ1aWx0QXNhciIsIm91dHB1dFBhdGhzIiwic3Bpbm5lciJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7O0FBQUE7O0FBQ0E7O0FBRUE7O0FBQ0E7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QUFXLENBQUNzQyxPQUFiLElBQXdCLENBQUNOLFdBQVcsQ0FBQ08sVUFBekMsRUFBcUQ7QUFDbkQ7QUFDQSx3QkFBS3JELFdBQUwsRUFBa0IscUlBQXFJc0QsTUFBdko7QUFDRDs7QUFFRCxNQUFJUixXQUFXLENBQUNTLFlBQWhCLEVBQThCO0FBQzVCLFVBQU0sSUFBSTNDLEtBQUosQ0FBVSw2RUFBVixDQUFOO0FBQ0Q7O0FBRUQsUUFBTSxtQkFBUUMsV0FBUixFQUFxQixnQkFBckIsRUFBdUNYLFFBQXZDLEVBQWlERCxJQUFqRCxDQUFOO0FBQ0EsUUFBTSxtQkFBUVksV0FBUixFQUFxQixZQUFyQixDQUFOO0FBRUEzQixFQUFBQSxDQUFDLENBQUMsd0JBQUQsRUFBMkI0RCxXQUEzQixDQUFEO0FBRUEsUUFBTVUsV0FBVyxHQUFHLE1BQU0sK0JBQVNWLFdBQVQsQ0FBMUI7QUFFQSxRQUFNLG1CQUFRakMsV0FBUixFQUFxQixhQUFyQixFQUFvQztBQUN4Q1osSUFBQUEsSUFEd0M7QUFFeEN1RCxJQUFBQSxXQUZ3QztBQUd4Q3RELElBQUFBLFFBSHdDO0FBSXhDdUQsSUFBQUEsT0FBTyxFQUFFeEM7QUFKK0IsR0FBcEMsQ0FBTjtBQU9BLE1BQUlBLGVBQUosRUFBcUJBLGVBQWUsQ0FBRVMsT0FBakI7QUFDdEIsQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCAnY29sb3JzJztcbmltcG9ydCB7IG9yYSBhcyByZWFsT3JhLCBmYWtlT3JhLCBPcmFJbXBsIH0gZnJvbSAnQGVsZWN0cm9uLWZvcmdlL2FzeW5jLW9yYSc7XG5pbXBvcnQgeyBGb3JnZUFyY2gsIEZvcmdlUGxhdGZvcm0gfSBmcm9tICdAZWxlY3Ryb24tZm9yZ2Uvc2hhcmVkLXR5cGVzJztcbmltcG9ydCBkZWJ1ZyBmcm9tICdkZWJ1Zyc7XG5pbXBvcnQgZnMgZnJvbSAnZnMtZXh0cmEnO1xuaW1wb3J0IHsgZ2V0SG9zdEFyY2ggfSBmcm9tICdAZWxlY3Ryb24vZ2V0JztcbmltcG9ydCBnbG9iIGZyb20gJ2Zhc3QtZ2xvYic7XG5pbXBvcnQgcGFja2FnZXIgZnJvbSAnZWxlY3Ryb24tcGFja2FnZXInO1xuaW1wb3J0IHBhdGggZnJvbSAncGF0aCc7XG5pbXBvcnQgeyBwcm9taXNpZnkgfSBmcm9tICd1dGlsJztcblxuaW1wb3J0IGdldEZvcmdlQ29uZmlnIGZyb20gJy4uL3V0aWwvZm9yZ2UtY29uZmlnJztcbmltcG9ydCB7IHJ1bkhvb2sgfSBmcm9tICcuLi91dGlsL2hvb2snO1xuaW1wb3J0IHsgd2FybiB9IGZyb20gJy4uL3V0aWwvbWVzc2FnZXMnO1xuaW1wb3J0IHsgcmVhZE11dGF0ZWRQYWNrYWdlSnNvbiB9IGZyb20gJy4uL3V0aWwvcmVhZC1wYWNrYWdlLWpzb24nO1xuaW1wb3J0IHJlYnVpbGRIb29rIGZyb20gJy4uL3V0aWwvcmVidWlsZCc7XG5pbXBvcnQgcmVxdWlyZVNlYXJjaCBmcm9tICcuLi91dGlsL3JlcXVpcmUtc2VhcmNoJztcbmltcG9ydCByZXNvbHZlRGlyIGZyb20gJy4uL3V0aWwvcmVzb2x2ZS1kaXInO1xuaW1wb3J0IGdldEN1cnJlbnRPdXREaXIgZnJvbSAnLi4vdXRpbC9vdXQtZGlyJztcbmltcG9ydCB7IGdldEVsZWN0cm9uVmVyc2lvbiB9IGZyb20gJy4uL3V0aWwvZWxlY3Ryb24tdmVyc2lvbic7XG5cbmNvbnN0IGQgPSBkZWJ1ZygnZWxlY3Ryb24tZm9yZ2U6cGFja2FnZXInKTtcblxudHlwZSBFbGVjdHJvblBhY2thZ2VyQWZ0ZXJDb3B5SG9vayA9IChcbiAgYnVpbGRQYXRoOiBzdHJpbmcsXG4gIGVsZWN0cm9uVmVyc2lvbjogc3RyaW5nLFxuICBwUGxhdGZvcm06IEZvcmdlUGxhdGZvcm0sXG4gIHBBcmNoOiBGb3JnZUFyY2gsXG4gIGRvbmU6IChlcnI/OiBFcnJvcikgPT4gdm9pZFxuKSA9PiB2b2lkO1xuXG4vKipcbiAqIFJlc29sdmVzIGhvb2tzIGlmIHRoZXkgYXJlIGEgcGF0aCB0byBhIGZpbGUgKGluc3RlYWQgb2YgYSBgRnVuY3Rpb25gKS5cbiAqL1xuZnVuY3Rpb24gcmVzb2x2ZUhvb2tzKGhvb2tzOiAoc3RyaW5nIHwgRWxlY3Ryb25QYWNrYWdlckFmdGVyQ29weUhvb2spW10gfCB1bmRlZmluZWQsIGRpcjogc3RyaW5nKSB7XG4gIGlmIChob29rcykge1xuICAgIHJldHVybiBob29rcy5tYXAoKGhvb2spID0+IChcbiAgICAgIHR5cGVvZiBob29rID09PSAnc3RyaW5nJ1xuICAgICAgICA/IHJlcXVpcmVTZWFyY2g8RWxlY3Ryb25QYWNrYWdlckFmdGVyQ29weUhvb2s+KGRpciwgW2hvb2tdKSBhcyBFbGVjdHJvblBhY2thZ2VyQWZ0ZXJDb3B5SG9va1xuICAgICAgICA6IGhvb2tcbiAgICApKTtcbiAgfVxuXG4gIHJldHVybiBbXTtcbn1cblxuLyoqXG4gKiBSdW5zIGdpdmVuIGhvb2tzIHNlcXVlbnRpYWxseSBieSBtYXBwaW5nIHRoZW0gdG8gcHJvbWlzZXMgYW5kIGl0ZXJhdGluZ1xuICogdGhyb3VnaCB3aGlsZSBhd2FpdGluZ1xuICovXG5mdW5jdGlvbiBzZXF1ZW50aWFsSG9va3MoaG9va3M6IEZ1bmN0aW9uW10pIHtcbiAgcmV0dXJuIFthc3luYyAoLi4uYXJnczogYW55W10pID0+IHtcbiAgICBjb25zdCBkb25lID0gYXJnc1thcmdzLmxlbmd0aCAtIDFdO1xuICAgIGNvbnN0IHBhc3NlZEFyZ3MgPSBhcmdzLnNwbGljZSgwLCBhcmdzLmxlbmd0aCAtIDEpO1xuICAgIGZvciAoY29uc3QgaG9vayBvZiBob29rcykge1xuICAgICAgYXdhaXQgcHJvbWlzaWZ5KGhvb2spKC4uLnBhc3NlZEFyZ3MpO1xuICAgIH1cbiAgICBkb25lKCk7XG4gIH1dIGFzIFsoLi4uYXJnczogYW55W10pID0+IFByb21pc2U8dm9pZD5dO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIFBhY2thZ2VPcHRpb25zIHtcbiAgLyoqXG4gICAqIFRoZSBwYXRoIHRvIHRoZSBhcHAgdG8gcGFja2FnZVxuICAgKi9cbiAgZGlyPzogc3RyaW5nO1xuICAvKipcbiAgICogV2hldGhlciB0byB1c2Ugc2Vuc2libGUgZGVmYXVsdHMgb3IgcHJvbXB0IHRoZSB1c2VyIHZpc3VhbGx5XG4gICAqL1xuICBpbnRlcmFjdGl2ZT86IGJvb2xlYW47XG4gIC8qKlxuICAgKiBUaGUgdGFyZ2V0IGFyY2hcbiAgICovXG4gIGFyY2g/OiBGb3JnZUFyY2g7XG4gIC8qKlxuICAgKiBUaGUgdGFyZ2V0IHBsYXRmb3JtLlxuICAgKi9cbiAgcGxhdGZvcm0/OiBGb3JnZVBsYXRmb3JtO1xuICAvKipcbiAgICogVGhlIHBhdGggdG8gdGhlIG91dHB1dCBkaXJlY3RvcnkgZm9yIHBhY2thZ2VkIGFwcHNcbiAgICovXG4gIG91dERpcj86IHN0cmluZztcbn1cblxuZXhwb3J0IGRlZmF1bHQgYXN5bmMgKHtcbiAgZGlyID0gcHJvY2Vzcy5jd2QoKSxcbiAgaW50ZXJhY3RpdmUgPSBmYWxzZSxcbiAgYXJjaCA9IGdldEhvc3RBcmNoKCkgYXMgRm9yZ2VBcmNoLFxuICBwbGF0Zm9ybSA9IHByb2Nlc3MucGxhdGZvcm0gYXMgRm9yZ2VQbGF0Zm9ybSxcbiAgb3V0RGlyLFxufTogUGFja2FnZU9wdGlvbnMpID0+IHtcbiAgY29uc3Qgb3JhID0gaW50ZXJhY3RpdmUgPyByZWFsT3JhIDogZmFrZU9yYTtcblxuICBsZXQgcHJlcGFyZVNwaW5uZXIgPSBvcmEoYFByZXBhcmluZyB0byBQYWNrYWdlIEFwcGxpY2F0aW9uIGZvciBhcmNoOiAkeyhhcmNoID09PSAnYWxsJyA/ICdpYTMyJyA6IGFyY2gpLmN5YW59YCkuc3RhcnQoKTtcbiAgbGV0IHByZXBhcmVDb3VudGVyID0gMDtcblxuICBjb25zdCByZXNvbHZlZERpciA9IGF3YWl0IHJlc29sdmVEaXIoZGlyKTtcbiAgaWYgKCFyZXNvbHZlZERpcikge1xuICAgIHRocm93IG5ldyBFcnJvcignRmFpbGVkIHRvIGxvY2F0ZSBjb21waWxhYmxlIEVsZWN0cm9uIGFwcGxpY2F0aW9uJyk7XG4gIH1cbiAgZGlyID0gcmVzb2x2ZWREaXI7XG5cbiAgY29uc3QgZm9yZ2VDb25maWcgPSBhd2FpdCBnZXRGb3JnZUNvbmZpZyhkaXIpO1xuICBjb25zdCBwYWNrYWdlSlNPTiA9IGF3YWl0IHJlYWRNdXRhdGVkUGFja2FnZUpzb24oZGlyLCBmb3JnZUNvbmZpZyk7XG5cbiAgaWYgKCFwYWNrYWdlSlNPTi5tYWluKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdwYWNrYWdlSlNPTi5tYWluIG11c3QgYmUgc2V0IHRvIGEgdmFsaWQgZW50cnkgcG9pbnQgZm9yIHlvdXIgRWxlY3Ryb24gYXBwJyk7XG4gIH1cblxuICBjb25zdCBjYWxjdWxhdGVkT3V0RGlyID0gb3V0RGlyIHx8IGdldEN1cnJlbnRPdXREaXIoZGlyLCBmb3JnZUNvbmZpZyk7XG4gIGxldCBwYWNrYWdlclNwaW5uZXI6IE9yYUltcGwgfCBudWxsID0gbnVsbDtcblxuICBjb25zdCBwcnVuZUVuYWJsZWQgPSAhKCdwcnVuZScgaW4gZm9yZ2VDb25maWcucGFja2FnZXJDb25maWcpIHx8IGZvcmdlQ29uZmlnLnBhY2thZ2VyQ29uZmlnLnBydW5lO1xuXG4gIGNvbnN0IGFmdGVyQ29weUhvb2tzOiBFbGVjdHJvblBhY2thZ2VyQWZ0ZXJDb3B5SG9va1tdID0gW1xuICAgIGFzeW5jIChidWlsZFBhdGgsIGVsZWN0cm9uVmVyc2lvbiwgcFBsYXRmb3JtLCBwQXJjaCwgZG9uZSkgPT4ge1xuICAgICAgaWYgKHBhY2thZ2VyU3Bpbm5lcikge1xuICAgICAgICBwYWNrYWdlclNwaW5uZXIuc3VjY2VlZCgpO1xuICAgICAgICBwcmVwYXJlQ291bnRlciArPSAxO1xuICAgICAgICBwcmVwYXJlU3Bpbm5lciA9IG9yYShgUHJlcGFyaW5nIHRvIFBhY2thZ2UgQXBwbGljYXRpb24gZm9yIGFyY2g6ICR7KHByZXBhcmVDb3VudGVyID09PSAyID8gJ2FybXY3bCcgOiAneDY0JykuY3lhbn1gKS5zdGFydCgpO1xuICAgICAgfVxuICAgICAgY29uc3QgYmlucyA9IGF3YWl0IGdsb2IocGF0aC5qb2luKGJ1aWxkUGF0aCwgJyoqLy5iaW4vKiovKicpKTtcbiAgICAgIGZvciAoY29uc3QgYmluIG9mIGJpbnMpIHtcbiAgICAgICAgYXdhaXQgZnMucmVtb3ZlKGJpbik7XG4gICAgICB9XG4gICAgICBkb25lKCk7XG4gICAgfSwgYXN5bmMgKGJ1aWxkUGF0aCwgZWxlY3Ryb25WZXJzaW9uLCBwUGxhdGZvcm0sIHBBcmNoLCBkb25lKSA9PiB7XG4gICAgICBwcmVwYXJlU3Bpbm5lci5zdWNjZWVkKCk7XG4gICAgICBhd2FpdCBydW5Ib29rKGZvcmdlQ29uZmlnLCAncGFja2FnZUFmdGVyQ29weScsIGJ1aWxkUGF0aCwgZWxlY3Ryb25WZXJzaW9uLCBwUGxhdGZvcm0sIHBBcmNoKTtcbiAgICAgIGRvbmUoKTtcbiAgICB9LFxuICAgIGFzeW5jIChidWlsZFBhdGgsIGVsZWN0cm9uVmVyc2lvbiwgcFBsYXRmb3JtLCBwQXJjaCwgZG9uZSkgPT4ge1xuICAgICAgYXdhaXQgcmVidWlsZEhvb2soXG4gICAgICAgIGJ1aWxkUGF0aCxcbiAgICAgICAgZWxlY3Ryb25WZXJzaW9uLFxuICAgICAgICBwUGxhdGZvcm0sXG4gICAgICAgIHBBcmNoLFxuICAgICAgICBmb3JnZUNvbmZpZy5lbGVjdHJvblJlYnVpbGRDb25maWcsXG4gICAgICApO1xuICAgICAgcGFja2FnZXJTcGlubmVyID0gb3JhKCdQYWNrYWdpbmcgQXBwbGljYXRpb24nKS5zdGFydCgpO1xuICAgICAgZG9uZSgpO1xuICAgIH0sXG4gIF07XG5cbiAgYWZ0ZXJDb3B5SG9va3MucHVzaChhc3luYyAoYnVpbGRQYXRoLCBlbGVjdHJvblZlcnNpb24sIHBQbGF0Zm9ybSwgcEFyY2gsIGRvbmUpID0+IHtcbiAgICBjb25zdCBjb3BpZWRQYWNrYWdlSlNPTiA9IGF3YWl0IHJlYWRNdXRhdGVkUGFja2FnZUpzb24oYnVpbGRQYXRoLCBmb3JnZUNvbmZpZyk7XG4gICAgaWYgKGNvcGllZFBhY2thZ2VKU09OLmNvbmZpZyAmJiBjb3BpZWRQYWNrYWdlSlNPTi5jb25maWcuZm9yZ2UpIHtcbiAgICAgIGRlbGV0ZSBjb3BpZWRQYWNrYWdlSlNPTi5jb25maWcuZm9yZ2U7XG4gICAgfVxuICAgIGF3YWl0IGZzLndyaXRlSnNvbihwYXRoLnJlc29sdmUoYnVpbGRQYXRoLCAncGFja2FnZS5qc29uJyksIGNvcGllZFBhY2thZ2VKU09OLCB7IHNwYWNlczogMiB9KTtcbiAgICBkb25lKCk7XG4gIH0pO1xuXG4gIGFmdGVyQ29weUhvb2tzLnB1c2goLi4ucmVzb2x2ZUhvb2tzKGZvcmdlQ29uZmlnLnBhY2thZ2VyQ29uZmlnLmFmdGVyQ29weSwgZGlyKSk7XG5cbiAgY29uc3QgYWZ0ZXJQcnVuZUhvb2tzID0gW107XG5cbiAgaWYgKHBydW5lRW5hYmxlZCkge1xuICAgIGFmdGVyUHJ1bmVIb29rcy5wdXNoKC4uLnJlc29sdmVIb29rcyhmb3JnZUNvbmZpZy5wYWNrYWdlckNvbmZpZy5hZnRlclBydW5lLCBkaXIpKTtcbiAgfVxuXG4gIGFmdGVyUHJ1bmVIb29rcy5wdXNoKChhc3luYyAoYnVpbGRQYXRoLCBlbGVjdHJvblZlcnNpb24sIHBQbGF0Zm9ybSwgcEFyY2gsIGRvbmUpID0+IHtcbiAgICBhd2FpdCBydW5Ib29rKGZvcmdlQ29uZmlnLCAncGFja2FnZUFmdGVyUHJ1bmUnLCBidWlsZFBhdGgsIGVsZWN0cm9uVmVyc2lvbiwgcFBsYXRmb3JtLCBwQXJjaCk7XG4gICAgZG9uZSgpO1xuICB9KSBhcyBFbGVjdHJvblBhY2thZ2VyQWZ0ZXJDb3B5SG9vayk7XG5cbiAgY29uc3QgYWZ0ZXJFeHRyYWN0SG9va3MgPSBbKGFzeW5jIChidWlsZFBhdGgsIGVsZWN0cm9uVmVyc2lvbiwgcFBsYXRmb3JtLCBwQXJjaCwgZG9uZSkgPT4ge1xuICAgIGF3YWl0IHJ1bkhvb2soZm9yZ2VDb25maWcsICdwYWNrYWdlQWZ0ZXJFeHRyYWN0JywgYnVpbGRQYXRoLCBlbGVjdHJvblZlcnNpb24sIHBQbGF0Zm9ybSwgcEFyY2gpO1xuICAgIGRvbmUoKTtcbiAgfSkgYXMgRWxlY3Ryb25QYWNrYWdlckFmdGVyQ29weUhvb2tdO1xuICBhZnRlckV4dHJhY3RIb29rcy5wdXNoKC4uLnJlc29sdmVIb29rcyhmb3JnZUNvbmZpZy5wYWNrYWdlckNvbmZpZy5hZnRlckV4dHJhY3QsIGRpcikpO1xuXG4gIHR5cGUgUGFja2FnZXJBcmNoID0gRXhjbHVkZTxGb3JnZUFyY2gsICdhcm0nPjtcblxuICBjb25zdCBwYWNrYWdlT3B0czogcGFja2FnZXIuT3B0aW9ucyA9IHtcbiAgICBhc2FyOiBmYWxzZSxcbiAgICBvdmVyd3JpdGU6IHRydWUsXG4gICAgLi4uZm9yZ2VDb25maWcucGFja2FnZXJDb25maWcsXG4gICAgZGlyLFxuICAgIGFyY2g6IGFyY2ggYXMgUGFja2FnZXJBcmNoLFxuICAgIHBsYXRmb3JtLFxuICAgIGFmdGVyQ29weTogc2VxdWVudGlhbEhvb2tzKGFmdGVyQ29weUhvb2tzKSxcbiAgICBhZnRlckV4dHJhY3Q6IHNlcXVlbnRpYWxIb29rcyhhZnRlckV4dHJhY3RIb29rcyksXG4gICAgYWZ0ZXJQcnVuZTogc2VxdWVudGlhbEhvb2tzKGFmdGVyUHJ1bmVIb29rcyksXG4gICAgb3V0OiBjYWxjdWxhdGVkT3V0RGlyLFxuICAgIGVsZWN0cm9uVmVyc2lvbjogYXdhaXQgZ2V0RWxlY3Ryb25WZXJzaW9uKGRpciwgcGFja2FnZUpTT04pLFxuICB9O1xuICBwYWNrYWdlT3B0cy5xdWlldCA9IHRydWU7XG5cbiAgaWYgKHBhY2thZ2VPcHRzLmFsbCkge1xuICAgIHRocm93IG5ldyBFcnJvcignY29uZmlnLmZvcmdlLnBhY2thZ2VyQ29uZmlnLmFsbCBpcyBub3Qgc3VwcG9ydGVkIGJ5IEVsZWN0cm9uIEZvcmdlJyk7XG4gIH1cblxuICBpZiAoIXBhY2thZ2VKU09OLnZlcnNpb24gJiYgIXBhY2thZ2VPcHRzLmFwcFZlcnNpb24pIHtcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbWF4LWxlblxuICAgIHdhcm4oaW50ZXJhY3RpdmUsICdQbGVhc2Ugc2V0IFwidmVyc2lvblwiIG9yIFwiY29uZmlnLmZvcmdlLnBhY2thZ2VyQ29uZmlnLmFwcFZlcnNpb25cIiBpbiB5b3VyIGFwcGxpY2F0aW9uXFwncyBwYWNrYWdlLmpzb24gc28gYXV0by11cGRhdGVzIHdvcmsgcHJvcGVybHknLnllbGxvdyk7XG4gIH1cblxuICBpZiAocGFja2FnZU9wdHMucHJlYnVpbHRBc2FyKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdjb25maWcuZm9yZ2UucGFja2FnZXJDb25maWcucHJlYnVpbHRBc2FyIGlzIG5vdCBzdXBwb3J0ZWQgYnkgRWxlY3Ryb24gRm9yZ2UnKTtcbiAgfVxuXG4gIGF3YWl0IHJ1bkhvb2soZm9yZ2VDb25maWcsICdnZW5lcmF0ZUFzc2V0cycsIHBsYXRmb3JtLCBhcmNoKTtcbiAgYXdhaXQgcnVuSG9vayhmb3JnZUNvbmZpZywgJ3ByZVBhY2thZ2UnKTtcblxuICBkKCdwYWNrYWdpbmcgd2l0aCBvcHRpb25zJywgcGFja2FnZU9wdHMpO1xuXG4gIGNvbnN0IG91dHB1dFBhdGhzID0gYXdhaXQgcGFja2FnZXIocGFja2FnZU9wdHMpO1xuXG4gIGF3YWl0IHJ1bkhvb2soZm9yZ2VDb25maWcsICdwb3N0UGFja2FnZScsIHtcbiAgICBhcmNoLFxuICAgIG91dHB1dFBhdGhzLFxuICAgIHBsYXRmb3JtLFxuICAgIHNwaW5uZXI6IHBhY2thZ2VyU3Bpbm5lcixcbiAgfSk7XG5cbiAgaWYgKHBhY2thZ2VyU3Bpbm5lcikgcGFja2FnZXJTcGlubmVyIS5zdWNjZWVkKCk7XG59O1xuIl19